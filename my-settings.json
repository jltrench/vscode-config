{
  "workbench.colorTheme": "Solarized Osaka",
  "workbench.productIconTheme": "fluent-icons",
  "workbench.iconTheme": "symbols",
  "workbench.sideBar.location": "right",
  "window.commandCenter": false,
  "workbench.editor.labelFormat": "short",
 // "workbench.statusBar.visible": false,
  "workbench.editor.enablePreview": false,
  "workbench.editor.splitInGroupLayout": "vertical",
  "workbench.layoutControl.enabled": false,
  "editor.fontFamily": "Caskaydiacove Nerd Font Mono",
  "editor.semanticHighlighting.enabled": false,
  "editor.cursorBlinking": "solid",
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.fontLigatures": true,
  "editor.fontSize": 15,
  "editor.bracketPairColorization.enabled": true,
  "editor.cursorStyle": "line-thin",
  "editor.lineHeight": 1.5,
  "editor.minimap.enabled": false,
  "editor.guides.indentation": true,
  "editor.renderWhitespace": "selection",
  "editor.guides.bracketPairs": false,
  "editor.guides.highlightActiveIndentation": true,
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.cursorStyle": "line",
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.cursorWidth": 2,
  "terminal.integrated.fontFamily": "Caskaydiacove Nerd Font Mono",
  "terminal.integrated.allowChords": true,
  "reactSnippets.settings.prettierEnabled": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": true,
  "prettier.requireConfig": true,
  "explorer.fileNesting.enabled": true,
  "symbols.hidesExplorerArrows": false,
  "breadcrumbs.enabled": false,
  "apc.font.family": "Caskaydiacove Nerd Font Mono",
  "apc.header": {
    "height": 29
  },
  "apc.activityBar": {
    "position": "top",
    "size": 30,
    "itemSize": 30,
    "itemMargin": 0,
  },
  "apc.statusBar": {
    "position": "top",
    "height": 20,
    "fontSize": 10,
  },
  "apc.listRow": {
    "height": 25
  },
  // ATIVA ISSO DEPOIS DE SALVAR, CASO CONTRÁRIO PODE NÃO ALTERAR A TITLEBAR.
  "window.titleBarStyle": "native",
  "apc.electron": {
    "titleBarStyle": "hidden",
    "frame": false,
  },
  "apc.stylesheet": {
    "html": "border: 1px solid #202023;",
    ".monaco-grid-branch-node": "top: 0 !important",
    ".editor-actions": "display: none !important",
    ".monaco-editor .suggest-widget": "border-radius: 6px; border: 1px solid rgba(255,255,255,0.04); opacity: 0.97; backdrop-filter: blur(15px);",
    "body > div.file-icons-enabled.enable-motion.monaco-workbench.windows.chromium.nopanel.noauxiliarybar.no-activity-bar.sidebar-right.vs-dark.mvllow-rose-pine-themes-rose-pine-color-theme-json > div.monaco-grid-view > div > div > div.monaco-scrollable-element > div.split-view-container > div:nth-child(3) > div > div > div.monaco-scrollable-element > div.split-view-container > div.split-view-view.visible > div > div > div.monaco-scrollable-element > div.split-view-container > div.split-view-view.visible > div > div > div.sash-container > div:nth-child(2)": "border-left: 1px solid rgba(255,255,255,0.04)"
  },
  // Dart / Flutter
	"debug.openDebug": "openOnDebugBreak",

	"debug.internalConsoleOptions": "openOnSessionStart",

	"[dart]": {
		// Automatically format code on save and during typing of certain characters
		// (like `;` and `}`).
		"editor.formatOnSave": true,
		"editor.formatOnType": true,

		// Draw a guide line at 80 characters, where Dart's formatting will wrap code.
		"editor.rulers": [80],

		// Disables built-in highlighting of words that match your selection. Without
		// this, all instances of the selected text will be highlighted, interfering
		// with Dart's ability to highlight only exact references to the selected variable.
		"editor.selectionHighlight": false,

		// By default, VS Code will pre-select the most recently used item from code
		// completion. This is usually not the most relevant item.
		//
		// "first" will always select top item
		// "recentlyUsedByPrefix" will filter the recently used items based on the
		//     text immediately preceding where completion was invoked.
		"editor.suggestSelection": "first",

		// Allows pressing <TAB> to complete snippets such as `for` even when the
		// completion list is not visible.
		"editor.tabCompletion": "onlySnippets",

		// By default, VS Code will populate code completion with words found in the
		// matching documents when a language service does not provide its own completions.
		// This results in code completion suggesting words when editing comments and
		// strings. This setting will prevent that.
		"editor.wordBasedSuggestions": "off",
  },
  "github.copilot.enable": {
    "*": false,
    "plaintext": false,
    "markdown": false,
    "scminput": false
  },
}